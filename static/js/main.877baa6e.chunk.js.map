{"version":3,"sources":["Recipes.js","App.js","serviceWorker.js","index.js"],"names":["Recipes","title","calories","image","ingredients","diet","healthLabels","Card","className","CardImg","top","width","src","alt","CardBody","CardTitle","CardSubtitle","CardText","map","ingredient","text","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","content","content2","useEffect","getRecipes","a","fetch","response","json","data","hits","recipe","i","push","key","label","parseFloat","toFixed","dietLabels","Container","Row","Col","sm","Form","onSubmit","e","preventDefault","InputGroup","Input","type","value","onChange","target","placeholder","Button","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.877baa6e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport { Card, CardBody, CardTitle, CardSubtitle, CardText, CardImg } from 'reactstrap';\r\n\r\n\r\n\r\nconst Recipes = ({ title, calories, image, ingredients, diet, healthLabels }) => {\r\n    //console.log({calories});\r\n    return(\r\n        <div>\r\n            \r\n\r\n        <Card className=\"cards\">\r\n            <CardImg top width=\"100%\" src={image} alt={ title } />\r\n            <CardBody>\r\n                <CardTitle><h1>{ title }</h1></CardTitle>\r\n                <CardSubtitle><b>Calories:</b> { calories }</CardSubtitle>\r\n                <CardSubtitle><b>Diet facts:</b> { diet }</CardSubtitle>\r\n                <CardSubtitle><b>Health facts:</b> { healthLabels }</CardSubtitle>\r\n                <CardText>\r\n                <p><b>Ingredients:</b></p>\r\n                    { ingredients.map(ingredient => (\r\n                        <li>{ ingredient.text }</li>\r\n                    )) }\r\n                </CardText>\r\n            </CardBody>\r\n        </Card>\r\n            \r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default Recipes;","import React, {useEffect, useState} from 'react';\nimport Recipes from './Recipes';\nimport './App.css';\nimport { Button, Input, Form, InputGroup, Container, Row, Col } from 'reactstrap';\n\nconst App = () => {\n\n  const APP_ID = \"4eaee232\";\n  const APP_KEY = \"47b9d46ae49a059bdd6639bd92ef51c1\";\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('chicken');\n  const content = [];\n  const content2 = [];\n\n\n  useEffect(() => {\n    getRecipes()\n  },[query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipes(data.hits);\n    //console.log(data.hits);\n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  }\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n  \n  recipes.map((recipe, i) => {\n      if((i % 2 === 0)){\n        content.push(\n            <Recipes \n                key={i} \n                title={recipe.recipe.label} \n                calories={parseFloat(recipe.recipe.calories).toFixed(0)} \n                image={recipe.recipe.image} \n                ingredients={recipe.recipe.ingredients}\n                diet={recipe.recipe.dietLabels}\n                healthLabels={recipe.recipe.healthLabels}\n            />\n        )\n      }else{\n          content2.push(\n              <Recipes \n                  key={i} \n                  title={recipe.recipe.label} \n                  calories={parseFloat(recipe.recipe.calories).toFixed(0)} \n                  image={recipe.recipe.image} \n                  ingredients={recipe.recipe.ingredients}\n                  diet={recipe.recipe.dietLabels}\n                  healthLabels={recipe.recipe.healthLabels}\n              />\n          );\n      }\n  });\n\n\n  return (\n    <Container className=\"App\">\n      <Row>\n        <Col sm=\"12\" className=\"form\">\n          <h1>Recipes</h1>\n          <Form className=\"search-form\" onSubmit={getSearch}>\n          <InputGroup>\n              <Input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch} placeholder=\"Search your recipes\" />\n              <Button className=\"search-button\" type=\"submit\" color=\"primary\">Search</Button>\n          </InputGroup>\n          </Form>\n        </Col>\n        <Col sm=\"6\">    \n            {content}\n        </Col>\n        <Col sm=\"6\">    \n            {content2}\n        </Col>\n      </Row>\n    </Container>\n  );\n\n\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}